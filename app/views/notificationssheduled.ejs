<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./partials/header'); %>
</head>

<body>
    <%- include('./partials/nav_bar'); %>

        <div class="container-fuid datos" id="app">

            <div v-if="false" style="background:#444;color:#fff;padding:.5rem;position:fixed;bottom:0px;left:0px;font-size:10px">
                <button @click="timeServerGet">Obtener hora del server</button> <span
                    style="padding:.5rem;color:white">{{timeServer}}</span></div>
            <div class="row justify-content-end heading-page heading-v5">
                <div class="col-4">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a class="text-light" href="#">Inicio</a></li>
                            <li class="breadcrumb-item"><a class="text-light" href="#">Notificaciones</a></li>
                        </ol>
                    </nav>
                </div>
                <div class="col-12">
                    <div class="heading-title">
                        <h2>Notificaciones</h2>
                    </div>
                </div>
            </div>
            <div  v-if="false" class="row heading-page justify-content-center bg-gray pt-3 pb-1">
                <div class="col-md-3 text-center">
                    <span @click="formType='new'" class="btn btn-danger">Crear</span>
                    <!--
            <span @click="formType='program'" class="btn btn-danger">Programar</span>
            -->
                </div>
                <div class="col-4">
                    <form class="form-inline">
                        <div class="form-group mb-2">
                            <select class="custom-select">
                                <option>Acciones en lote</option>
                            </select>
                        </div>
                        <div class="form-group mb-2">
                            <button type="submit" class="btn btn-primary ml-2">Aplicar</button>
                        </div>
                    </form>
                </div>
                <div class="col-4">
                    <form class="form-inline">
                        <div class="form-group mb-2">
                            <div class="form-group">
                                <input type="text" class="form-control" placeholder="Consulta">
                            </div>
                        </div>
                        <div class="form-group mb-2">
                            <button type="submit" class="btn btn-primary ml-2">Buscar</button>
                        </div>
                    </form>
                </div>
            </div>
            <div class="row heading-page justify-content-center content-table pt-3">
                <div class="col-10" style="display: flex;justify-content: center;margin-bottom: 2rem;">
                    <div class="card" style="display: flex;flex-direction: row;width: 500px;">
                        <div style="display: flex;flex-direction:column;padding:1rem" >
                            <img v-if="false" class="card-img-top" style="width:150px;height:auto" :src="img" alt="Card image cap">
                            <br>
                            
                            <div >Las imágenes que se suben a través del Compositor de Notifications tienen un límite de
                        tamaño de 300 KB</div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title"><input placeholder="Titulo"
                                    style="border:0;border-bottom:1px #333 solid;border-radius:0" type="text"
                                    v-model="title"></h5>
                            <p class="card-text"><input placeholder="Cuerpo"
                                    style="border:0;border-bottom:1px #333 solid;border-radius:0" type="text"
                                    v-model="body"></p>
                            <p v-if="formType == 'program'" class="card-text">Fecha: <input
                                    style="border:0;border-bottom:1px #333 solid;border-radius:0" type="date"
                                    v-model="date"></p>
                            <p v-if="formType == 'program'" class="card-text">Hora: <input
                                    style="border:0;border-bottom:1px #333 solid;border-radius:0" type="time"
                                    v-model="time"></p>
                            <p class="card-text">Grado:
                                <select v-model="grade">
                                    <option value="false">Escoja rol</option>
                                    <option v-for="grade of grades" :value="grade">
                                        {{ grade }}
                                    </option>
                                </select>
                                <label>Filtro: <input v-model="query"></label>
                                <span class="btn"
                                    v-bind:class="[fileInput == null?'btn-outline-info' : 'btn-outline-success']"
                                    @click="$refs.icon.click()">Imagen</span>
                            </p>
                            <input style="display: none;" ref="icon" type="file" @change="fileInputChange">
                            <div style="display: flex;justify-content: center;">
                                <span @click="notifCreate" class="btn btn-primary">Crear</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-10">
                    <table class="table table-striped magazine-table mb-3">
                        <thead class="thead-dark">
                            <tr>
                                <th>Filtro</th>
                                <th>Fecha</th>
                                <th>Hora</th>
                                <th>Titulo </th>
                                <th>Cuerpo </th>
                                <th v-if="false">Imagen </th>
                                <th>Estado </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr :style="notif.send == 0 ? 'background:orange' : 'background:green;color:#fff'"
                                v-for="(notif , indexNotification ) of notifications.slice(0,20)" @click="notifTarget(notif)" :key="notif.id">
                                <td>{{notif.notification.query ?? 'grade=' + notif.notification.role }}</td>
                                <td>{{dateParsed(notif.notification.date , notif.notification.time)}}</td>
                                <td>{{timeParsed(notif.notification.time , indexNotification) }}</td>
                                <td>{{notif.notification.title}}</td>
                                <td>{{notif.notification.body}}</td>
                                <td v-if="false"><img width="50px" height="auto"
                                        :src="notif.notification.icon ?? notif.notification.image"></td>
                                <td><span class="btn btn-small"
                                        v-bind:class="[notif.state == 1 ? 'btn-success' : '']">{{notif.state == 1 ?
                                        'Activa' : 'Cancelado'}}:{{notif.send == 1 ? 'Enviado' : 'Enviando'}}</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <!--
    <script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js"></script>
-->
        <script src="/refam/javascript/vue.js"></script>
        <script src="/refam/javascript/axios.js"></script>
        <script>
            new Vue({
                el: '#app',
                data() {
                    return {
                        formType: 'new',
                        notificationsSend: [],
                        notificationsNotSend: [],
                        notifications: [],
                        timeServer: "",
                        title: "",
                        body: "",
                        grade: "",
                        query: "",
                        grades: [],
                        date: new Date().toISOString().substr(0, 10),
                        time: new Date().toGMTString().split(" ")[4].substr(0, 5),
                        img: "/refam/images/noche-zocalo.png",
                        id: null,
                        fileInput: null,
                        newDefault: {
                            title: "",
                            body: "",
                            grade: "",
                            query: "",
                            date: new Date().toISOString().substr(0, 10),
                            time: new Date().toGMTString().split(" ")[4].substr(0, 5),
                            img: "/refam/images/noche-zocalo.png",
                            id: null
                        }
                    }
                },
                mounted() {
                    axios.get('/refam/api/notificacionesRoles')
                        .then(res => {
                            this.grades = res.data
                        })
                    axios.get('/refam/api/notificaciones')
                        .then(res => {
                            let dom = location.href.replace('notificaciones', 'images/notif/')
                            for (let notif of Object.values(res.data.data)) {
                                console.log(notif)
                                //notif.notification.image = notif.notification.image ? dom + notif.notification.image : notif.notification.icon
                                console.log(notif.notification.title, " : ", notif.notification)
                                notif.notification.date = new Date(notif.datetime).toISOString().substr(0, 10)
                                notif.notification.time = new Date(notif.datetime).toISOString().split("T")[1].split('.')[0]
                                this.notifications = [notif, ...this.notifications]
                            }
                        })
                },
                methods: {
                    timeParsed(time , indexNotification) {
                        let times = []
                        for (let t = 0; t < 24; t++) {
                            times.push(t)
                        }
                        times = [...times, ...times]
                        return times[+time.split(':')[0] + 14] + ':' + time.split(':')[1]
                    },
                    dateParsed(dateNotification , time) {
                        // agregamos la zona horaria y luego calculamos la fecha
                        console.log('time ' , time)
                        let times = []
                        for (let t = 0; t < 24; t++) {
                            times.push(t)
                        }
                        times = [...times, ...times]
                        let timeResult = times[+time.split(':')[0] + 14] + ':' + time.split(':')[1]

                        console.log('timeResult ' , timeResult)
                        let d = ( new Date(dateNotification))
                        console.log( times[+time.split(':')[0] + 14] > 5 , '--' , times[+time.split(':')[0] + 14])
                        if ( times[+time.split(':')[0] + 14] >= 18)
                            d.setDate(d.getDate() - 1)
                        return  d.toISOString().split('T')[0]
                    },
                    fileInputChange(e) {
                        this.fileInput = e.target.files[0]
                    },
                    notifCreate() {
                        let send = {
                            notification: {
                                title: this.title,
                                body: this.body,
                                role: this.grade,
                                query: this.query
                            },
                            role: this.grade,
                            query: this.query,
                            datetime: this.date + "T" + this.time + ":00"
                        }
                        let data = new FormData();
                        data.append('icon', this.fileInput);
                        axios.post('/refam/api/notificaciones', send)
                            .then(res => {
                                console.log(res.data)
                                if (res.data.error != undefined) {
                                    console.log(res.data.error)
                                    alertWarning(res.data.error)
                                } else {
                                    this.notifCreateIcon(res.data.data)
                                }
                            })

                    },
                    notifCreateIcon(notif) {
                        console.log("notifCreateIcon > ", { notif })
                        let data = new FormData();
                        data.append('id', notif.id);
                        data.append('icon', this.fileInput);
                        axios.post('/refam/api/notificacionesImage',
                            data,
                            {
                                headers: {
                                    'accept': 'application/json',
                                    'Content-Type': `multipart/form-data`,
                                }
                            })
                            .then(res => {
                                notif.notification.icon = res.data.data.icon
                                notif.notification.datetime = notif.datetime
                                notif.notification.date = new Date(notif.datetime).toISOString().substr(0, 10)
                                notif.notification.time = new Date(notif.datetime).toGMTString().split(" ")[4].substr(0, 5)
                                this.notifications = [notif, ...this.notifications]
                                this.fileInput = null
                                for (let key in this.newDefault) {
                                    this[key] = this.newDefault[key]
                                }
                                //location.reload()
                            })
                    },
                    notifTarget(item) {
                        for (let key in notif) {
                            this[key] = notif[key]
                        }
                    },
                    timeServerGet() {
                        axios.get('/refam/api/datetime')
                            .then(res => {
                                console.log(res.data)
                                this.timeServer = res.data.datetime.split('GMT')[0]
                            })
                            .catch(e => console.log(e))
                    }
                }
            })
        </script>
</body>

</html>